{"ast":null,"code":"/* import React from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { supabase } from \"../supabase/client\";\r\nimport { clearCart, getOrCreateCart } from \"../supabase/cartService\";\r\n\r\nconst Checkout = () => {\r\n  const { state } = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const handleConfirmPayment = async () => {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) return alert(\"Inicia sesiÃ³n\");\r\n\r\n    const total = state.total;\r\n\r\n    const { data: order } = await supabase\r\n      .from(\"orders\")\r\n      .insert({ user_id: user.id, total, status: \"pagado\" })\r\n      .select()\r\n      .single();\r\n\r\n    for (const item of state.items) {\r\n      await supabase.from(\"order_items\").insert({\r\n        order_id: order.id,\r\n        product_id: item.products.id,\r\n        quantity: item.quantity,\r\n        price: item.products.price,\r\n      });\r\n\r\n      // ðŸ”» Reducir stock\r\n      const newStock = item.products.stock - item.quantity;\r\n      await supabase\r\n        .from(\"products\")\r\n        .update({ stock: newStock })\r\n        .eq(\"id\", item.products.id);\r\n    }\r\n\r\n    const cart = await getOrCreateCart(user.id);\r\n    await clearCart(cart.id);\r\n\r\n    alert(\"âœ… Pago confirmado. Pedido realizado.\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>ðŸ’³ Confirmar pedido</h2>\r\n      <p>Total a pagar: ${state.total.toFixed(2)}</p>\r\n      <button onClick={handleConfirmPayment}>Pagar (simulado)</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;*/","map":{"version":3,"names":[],"sources":["C:/tienda_reptil/src/pages/Checkout.jsx"],"sourcesContent":["/* import React from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { supabase } from \"../supabase/client\";\r\nimport { clearCart, getOrCreateCart } from \"../supabase/cartService\";\r\n\r\nconst Checkout = () => {\r\n  const { state } = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const handleConfirmPayment = async () => {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) return alert(\"Inicia sesiÃ³n\");\r\n\r\n    const total = state.total;\r\n\r\n    const { data: order } = await supabase\r\n      .from(\"orders\")\r\n      .insert({ user_id: user.id, total, status: \"pagado\" })\r\n      .select()\r\n      .single();\r\n\r\n    for (const item of state.items) {\r\n      await supabase.from(\"order_items\").insert({\r\n        order_id: order.id,\r\n        product_id: item.products.id,\r\n        quantity: item.quantity,\r\n        price: item.products.price,\r\n      });\r\n\r\n      // ðŸ”» Reducir stock\r\n      const newStock = item.products.stock - item.quantity;\r\n      await supabase\r\n        .from(\"products\")\r\n        .update({ stock: newStock })\r\n        .eq(\"id\", item.products.id);\r\n    }\r\n\r\n    const cart = await getOrCreateCart(user.id);\r\n    await clearCart(cart.id);\r\n\r\n    alert(\"âœ… Pago confirmado. Pedido realizado.\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>ðŸ’³ Confirmar pedido</h2>\r\n      <p>Total a pagar: ${state.total.toFixed(2)}</p>\r\n      <button onClick={handleConfirmPayment}>Pagar (simulado)</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}