{"ast":null,"code":"// src/supabase/cartService.js\nimport { supabase } from \"./client\";\nexport async function addToCart(userId, productId, quantity = 1) {\n  const cart = await getOrCreateCart(userId);\n  if (!cart) {\n    alert(\"⚠️ No se pudo obtener o crear el carrito. Intenta iniciar sesión nuevamente.\");\n    return;\n  }\n\n  // Verificar si ya existe el producto en el carrito\n  const {\n    data: existingItem\n  } = await supabase.from(\"cart_items\").select(\"*\").eq(\"cart_id\", cart.id).eq(\"product_id\", productId).maybeSingle();\n\n  // Verificar stock\n  const {\n    data: product,\n    error: productError\n  } = await supabase.from(\"products\").select(\"stock\").eq(\"id\", productId).single();\n  if (productError || !product) {\n    console.error(\"Error al obtener producto:\", productError === null || productError === void 0 ? void 0 : productError.message);\n    return;\n  }\n  if (product.stock <= 0) {\n    alert(\"❌ No hay stock disponible de este producto.\");\n    return;\n  }\n  if (existingItem) {\n    const newQuantity = Math.min(existingItem.quantity + quantity, product.stock);\n    await supabase.from(\"cart_items\").update({\n      quantity: newQuantity\n    }).eq(\"id\", existingItem.id);\n  } else {\n    await supabase.from(\"cart_items\").insert({\n      cart_id: cart.id,\n      product_id: productId,\n      quantity\n    });\n  }\n  alert(\"✅ Producto agregado al carrito.\");\n}\nexport async function getOrCreateCart(userId) {\n  if (!userId) {\n    console.error(\"❌ getOrCreateCart: userId es null o indefinido\");\n    return null;\n  }\n\n  // Buscar carrito existente\n  const {\n    data: existingCart,\n    error: fetchError\n  } = await supabase.from(\"carts\").select(\"*\").eq(\"user_id\", userId).maybeSingle();\n  if (fetchError) {\n    console.error(\"Error al obtener carrito:\", fetchError.message);\n  }\n  if (existingCart) return existingCart;\n\n  // Si no existe, crear uno nuevo\n  const {\n    data: newCart,\n    error: createError\n  } = await supabase.from(\"carts\").insert({\n    user_id: userId\n  }).select().single();\n  if (createError) {\n    console.error(\"Error al crear carrito:\", createError.message);\n    return null;\n  }\n  return newCart;\n}\nexport async function removeFromCart(itemId) {\n  await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\n}\nexport async function clearCart(cartId) {\n  await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cartId);\n}","map":{"version":3,"names":["supabase","addToCart","userId","productId","quantity","cart","getOrCreateCart","alert","data","existingItem","from","select","eq","id","maybeSingle","product","error","productError","single","console","message","stock","newQuantity","Math","min","update","insert","cart_id","product_id","existingCart","fetchError","newCart","createError","user_id","removeFromCart","itemId","delete","clearCart","cartId"],"sources":["C:/tienda_reptil/src/supabase/cartService.js"],"sourcesContent":["// src/supabase/cartService.js\r\nimport { supabase } from \"./client\";\r\n\r\nexport async function addToCart(userId, productId, quantity = 1) {\r\n  const cart = await getOrCreateCart(userId);\r\n\r\n  if (!cart) {\r\n    alert(\"⚠️ No se pudo obtener o crear el carrito. Intenta iniciar sesión nuevamente.\");\r\n    return;\r\n  }\r\n\r\n  // Verificar si ya existe el producto en el carrito\r\n  const { data: existingItem } = await supabase\r\n    .from(\"cart_items\")\r\n    .select(\"*\")\r\n    .eq(\"cart_id\", cart.id)\r\n    .eq(\"product_id\", productId)\r\n    .maybeSingle();\r\n\r\n  // Verificar stock\r\n  const { data: product, error: productError } = await supabase\r\n    .from(\"products\")\r\n    .select(\"stock\")\r\n    .eq(\"id\", productId)\r\n    .single();\r\n\r\n  if (productError || !product) {\r\n    console.error(\"Error al obtener producto:\", productError?.message);\r\n    return;\r\n  }\r\n\r\n  if (product.stock <= 0) {\r\n    alert(\"❌ No hay stock disponible de este producto.\");\r\n    return;\r\n  }\r\n\r\n  if (existingItem) {\r\n    const newQuantity = Math.min(\r\n      existingItem.quantity + quantity,\r\n      product.stock\r\n    );\r\n\r\n    await supabase\r\n      .from(\"cart_items\")\r\n      .update({ quantity: newQuantity })\r\n      .eq(\"id\", existingItem.id);\r\n  } else {\r\n    await supabase\r\n      .from(\"cart_items\")\r\n      .insert({ cart_id: cart.id, product_id: productId, quantity });\r\n  }\r\n\r\n  alert(\"✅ Producto agregado al carrito.\");\r\n}\r\n\r\nexport async function getOrCreateCart(userId) {\r\n  if (!userId) {\r\n    console.error(\"❌ getOrCreateCart: userId es null o indefinido\");\r\n    return null;\r\n  }\r\n\r\n  // Buscar carrito existente\r\n  const { data: existingCart, error: fetchError } = await supabase\r\n    .from(\"carts\")\r\n    .select(\"*\")\r\n    .eq(\"user_id\", userId)\r\n    .maybeSingle();\r\n\r\n  if (fetchError) {\r\n    console.error(\"Error al obtener carrito:\", fetchError.message);\r\n  }\r\n\r\n  if (existingCart) return existingCart;\r\n\r\n  // Si no existe, crear uno nuevo\r\n  const { data: newCart, error: createError } = await supabase\r\n    .from(\"carts\")\r\n    .insert({ user_id: userId })\r\n    .select()\r\n    .single();\r\n\r\n  if (createError) {\r\n    console.error(\"Error al crear carrito:\", createError.message);\r\n    return null;\r\n  }\r\n\r\n  return newCart;\r\n}\r\n\r\n\r\nexport async function removeFromCart(itemId) {\r\n  await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\r\n}\r\n\r\nexport async function clearCart(cartId) {\r\n  await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cartId);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}