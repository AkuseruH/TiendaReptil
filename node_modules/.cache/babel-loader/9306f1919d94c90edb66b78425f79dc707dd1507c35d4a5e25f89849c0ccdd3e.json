{"ast":null,"code":"// src/supabase/cartService.js\nimport { supabase } from \"./client\";\n\n/**\r\n * Obtiene o crea el carrito del usuario actual.\r\n */\nexport async function getOrCreateCart(userId) {\n  if (!userId) throw new Error(\"Usuario no autenticado.\");\n  const {\n    data: existingCart,\n    error: fetchError\n  } = await supabase.from(\"carts\").select(\"*\").eq(\"user_id\", userId).single();\n  if (fetchError && fetchError.code !== \"PGRST116\") throw fetchError;\n  if (existingCart) return existingCart;\n  const {\n    data: newCart,\n    error: createError\n  } = await supabase.from(\"carts\").insert({\n    user_id: userId\n  }).select().single();\n  if (createError) throw createError;\n  return newCart;\n}\n\n/**\r\n * Agrega un producto al carrito del usuario (validando sesión y stock)\r\n */\nexport async function addToCart(productId, quantity = 1) {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  if (!user) {\n    alert(\"Por favor, inicia sesión antes de agregar productos al carrito.\");\n    return;\n  }\n  const cart = await getOrCreateCart(user.id);\n\n  // Verificar si el producto ya está en el carrito\n  const {\n    data: existingItem\n  } = await supabase.from(\"cart_items\").select(\"*\").eq(\"cart_id\", cart.id).eq(\"product_id\", productId).single();\n\n  // Consultar stock del producto\n  const {\n    data: product,\n    error: productError\n  } = await supabase.from(\"products\").select(\"stock\").eq(\"id\", productId).single();\n  if (productError) {\n    console.error(\"Error al obtener producto:\", productError.message);\n    return;\n  }\n  if (product.stock <= 0) {\n    alert(\"❌ No hay stock disponible de este producto.\");\n    return;\n  }\n  if (existingItem) {\n    const newQuantity = Math.min(existingItem.quantity + quantity, product.stock);\n    await supabase.from(\"cart_items\").update({\n      quantity: newQuantity\n    }).eq(\"id\", existingItem.id);\n  } else {\n    await supabase.from(\"cart_items\").insert({\n      cart_id: cart.id,\n      product_id: productId,\n      quantity\n    });\n  }\n  alert(\"✅ Producto agregado al carrito.\");\n}\n\n/**\r\n * Obtiene los productos del carrito del usuario actual.\r\n */\nexport async function getCartItems() {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  if (!user) return [];\n  const cart = await getOrCreateCart(user.id);\n  const {\n    data,\n    error\n  } = await supabase.from(\"cart_items\").select(`\n      id,\n      quantity,\n      products (id, name, price, image_url, stock)\n    `).eq(\"cart_id\", cart.id);\n  if (error) {\n    console.error(\"Error al obtener el carrito:\", error.message);\n    return [];\n  }\n  return data;\n}\n\n/**\r\n * Elimina un producto del carrito.\r\n */\nexport async function removeFromCart(itemId) {\n  await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\n}\n\n/**\r\n * Vacía completamente el carrito de un usuario.\r\n */\nexport async function clearCart(cartId) {\n  await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cartId);\n}","map":{"version":3,"names":["supabase","getOrCreateCart","userId","Error","data","existingCart","error","fetchError","from","select","eq","single","code","newCart","createError","insert","user_id","addToCart","productId","quantity","user","auth","getUser","alert","cart","id","existingItem","product","productError","console","message","stock","newQuantity","Math","min","update","cart_id","product_id","getCartItems","removeFromCart","itemId","delete","clearCart","cartId"],"sources":["C:/tienda_reptil/src/supabase/cartService.js"],"sourcesContent":["// src/supabase/cartService.js\r\nimport { supabase } from \"./client\";\r\n\r\n/**\r\n * Obtiene o crea el carrito del usuario actual.\r\n */\r\nexport async function getOrCreateCart(userId) {\r\n  if (!userId) throw new Error(\"Usuario no autenticado.\");\r\n\r\n  const { data: existingCart, error: fetchError } = await supabase\r\n    .from(\"carts\")\r\n    .select(\"*\")\r\n    .eq(\"user_id\", userId)\r\n    .single();\r\n\r\n  if (fetchError && fetchError.code !== \"PGRST116\") throw fetchError;\r\n  if (existingCart) return existingCart;\r\n\r\n  const { data: newCart, error: createError } = await supabase\r\n    .from(\"carts\")\r\n    .insert({ user_id: userId })\r\n    .select()\r\n    .single();\r\n\r\n  if (createError) throw createError;\r\n  return newCart;\r\n}\r\n\r\n/**\r\n * Agrega un producto al carrito del usuario (validando sesión y stock)\r\n */\r\nexport async function addToCart(productId, quantity = 1) {\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) {\r\n    alert(\"Por favor, inicia sesión antes de agregar productos al carrito.\");\r\n    return;\r\n  }\r\n\r\n  const cart = await getOrCreateCart(user.id);\r\n\r\n  // Verificar si el producto ya está en el carrito\r\n  const { data: existingItem } = await supabase\r\n    .from(\"cart_items\")\r\n    .select(\"*\")\r\n    .eq(\"cart_id\", cart.id)\r\n    .eq(\"product_id\", productId)\r\n    .single();\r\n\r\n  // Consultar stock del producto\r\n  const { data: product, error: productError } = await supabase\r\n    .from(\"products\")\r\n    .select(\"stock\")\r\n    .eq(\"id\", productId)\r\n    .single();\r\n\r\n  if (productError) {\r\n    console.error(\"Error al obtener producto:\", productError.message);\r\n    return;\r\n  }\r\n\r\n  if (product.stock <= 0) {\r\n    alert(\"❌ No hay stock disponible de este producto.\");\r\n    return;\r\n  }\r\n\r\n  if (existingItem) {\r\n    const newQuantity = Math.min(\r\n      existingItem.quantity + quantity,\r\n      product.stock\r\n    );\r\n\r\n    await supabase\r\n      .from(\"cart_items\")\r\n      .update({ quantity: newQuantity })\r\n      .eq(\"id\", existingItem.id);\r\n  } else {\r\n    await supabase\r\n      .from(\"cart_items\")\r\n      .insert({ cart_id: cart.id, product_id: productId, quantity });\r\n  }\r\n\r\n  alert(\"✅ Producto agregado al carrito.\");\r\n}\r\n\r\n/**\r\n * Obtiene los productos del carrito del usuario actual.\r\n */\r\nexport async function getCartItems() {\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) return [];\r\n\r\n  const cart = await getOrCreateCart(user.id);\r\n\r\n  const { data, error } = await supabase\r\n    .from(\"cart_items\")\r\n    .select(`\r\n      id,\r\n      quantity,\r\n      products (id, name, price, image_url, stock)\r\n    `)\r\n    .eq(\"cart_id\", cart.id);\r\n\r\n  if (error) {\r\n    console.error(\"Error al obtener el carrito:\", error.message);\r\n    return [];\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Elimina un producto del carrito.\r\n */\r\nexport async function removeFromCart(itemId) {\r\n  await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\r\n}\r\n\r\n/**\r\n * Vacía completamente el carrito de un usuario.\r\n */\r\nexport async function clearCart(cartId) {\r\n  await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cartId);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}