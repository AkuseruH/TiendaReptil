{"ast":null,"code":"// src/supabase/cartService.js\nimport { supabase } from \"./client\";\n\n/**\r\n * üîπ Obtiene o crea el carrito del usuario actual.\r\n */\nexport async function getOrCreateCart(userId) {\n  if (!userId) throw new Error(\"Usuario no autenticado.\");\n\n  // Buscar si ya existe un carrito para este usuario\n  const {\n    data: existingCart,\n    error: fetchError\n  } = await supabase.from(\"carts\").select(\"*\").eq(\"user_id\", userId).single();\n\n  // Si hubo error distinto a \"no encontrado\" ‚Üí lanzamos\n  if (fetchError && fetchError.code !== \"PGRST116\") {\n    console.error(\"Error al obtener carrito:\", fetchError.message);\n    throw fetchError;\n  }\n\n  // Si ya existe, lo devolvemos\n  if (existingCart) return existingCart;\n\n  // Si no existe, creamos uno nuevo\n  const {\n    data: newCart,\n    error: createError\n  } = await supabase.from(\"carts\").insert({\n    user_id: userId\n  }).select().single();\n  if (createError) {\n    console.error(\"Error al crear carrito:\", createError.message);\n    throw createError;\n  }\n  return newCart;\n}\n\n/**\r\n * üîπ Agrega un producto al carrito del usuario actual.\r\n * Verifica sesi√≥n, stock y cantidad disponible.\r\n */\nexport async function addToCart(productId, quantity = 1) {\n  const {\n    data: {\n      user\n    },\n    error: userError\n  } = await supabase.auth.getUser();\n  if (userError) {\n    console.error(\"Error al obtener usuario:\", userError.message);\n    return;\n  }\n  if (!user) {\n    alert(\"‚ö†Ô∏è Debes iniciar sesi√≥n para agregar productos al carrito.\");\n    return;\n  }\n  try {\n    const cart = await getOrCreateCart(user.id);\n\n    // Verificar si el producto ya est√° en el carrito\n    const {\n      data: existingItem\n    } = await supabase.from(\"cart_items\").select(\"*\").eq(\"cart_id\", cart.id).eq(\"product_id\", productId).single();\n\n    // Consultar stock del producto\n    const {\n      data: product,\n      error: productError\n    } = await supabase.from(\"products\").select(\"stock\").eq(\"id\", productId).single();\n    if (productError) throw productError;\n    if (!product) {\n      alert(\"‚ö†Ô∏è Producto no encontrado.\");\n      return;\n    }\n    if (product.stock <= 0) {\n      alert(\"‚ùå No hay stock disponible de este producto.\");\n      return;\n    }\n\n    // Si ya estaba en el carrito, actualizamos cantidad\n    if (existingItem) {\n      const newQuantity = Math.min(existingItem.quantity + quantity, product.stock);\n      await supabase.from(\"cart_items\").update({\n        quantity: newQuantity\n      }).eq(\"id\", existingItem.id);\n    } else {\n      // Si no estaba, lo insertamos\n      await supabase.from(\"cart_items\").insert({\n        cart_id: cart.id,\n        product_id: productId,\n        quantity\n      });\n    }\n    alert(\"‚úÖ Producto agregado al carrito.\");\n  } catch (err) {\n    console.error(\"Error al agregar al carrito:\", err.message);\n    alert(\"Ocurri√≥ un error al agregar el producto al carrito.\");\n  }\n}\n\n/**\r\n * üîπ Obtiene todos los productos del carrito del usuario actual.\r\n */\nexport async function getCartItems() {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  if (!user) return [];\n  try {\n    const cart = await getOrCreateCart(user.id);\n    const {\n      data,\n      error\n    } = await supabase.from(\"cart_items\").select(`\n        id,\n        quantity,\n        products (\n          id,\n          name,\n          price,\n          stock,\n          image_url\n        )\n      `).eq(\"cart_id\", cart.id);\n    if (error) throw error;\n    return data || [];\n  } catch (err) {\n    console.error(\"Error al obtener items del carrito:\", err.message);\n    return [];\n  }\n}\n\n/**\r\n * üîπ Elimina un producto espec√≠fico del carrito.\r\n */\nexport async function removeFromCart(itemId) {\n  const {\n    error\n  } = await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\n  if (error) console.error(\"Error al eliminar del carrito:\", error.message);\n}\n\n/**\r\n * üîπ Vac√≠a completamente el carrito del usuario actual.\r\n */\nexport async function clearCart() {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  if (!user) return;\n  const cart = await getOrCreateCart(user.id);\n  const {\n    error\n  } = await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cart.id);\n  if (error) console.error(\"Error al limpiar carrito:\", error.message);\n}","map":{"version":3,"names":["supabase","getOrCreateCart","userId","Error","data","existingCart","error","fetchError","from","select","eq","single","code","console","message","newCart","createError","insert","user_id","addToCart","productId","quantity","user","userError","auth","getUser","alert","cart","id","existingItem","product","productError","stock","newQuantity","Math","min","update","cart_id","product_id","err","getCartItems","removeFromCart","itemId","delete","clearCart"],"sources":["C:/tienda_reptil/src/supabase/cartService.js"],"sourcesContent":["// src/supabase/cartService.js\r\nimport { supabase } from \"./client\";\r\n\r\n/**\r\n * üîπ Obtiene o crea el carrito del usuario actual.\r\n */\r\nexport async function getOrCreateCart(userId) {\r\n  if (!userId) throw new Error(\"Usuario no autenticado.\");\r\n\r\n  // Buscar si ya existe un carrito para este usuario\r\n  const { data: existingCart, error: fetchError } = await supabase\r\n    .from(\"carts\")\r\n    .select(\"*\")\r\n    .eq(\"user_id\", userId)\r\n    .single();\r\n\r\n  // Si hubo error distinto a \"no encontrado\" ‚Üí lanzamos\r\n  if (fetchError && fetchError.code !== \"PGRST116\") {\r\n    console.error(\"Error al obtener carrito:\", fetchError.message);\r\n    throw fetchError;\r\n  }\r\n\r\n  // Si ya existe, lo devolvemos\r\n  if (existingCart) return existingCart;\r\n\r\n  // Si no existe, creamos uno nuevo\r\n  const { data: newCart, error: createError } = await supabase\r\n    .from(\"carts\")\r\n    .insert({ user_id: userId })\r\n    .select()\r\n    .single();\r\n\r\n  if (createError) {\r\n    console.error(\"Error al crear carrito:\", createError.message);\r\n    throw createError;\r\n  }\r\n\r\n  return newCart;\r\n}\r\n\r\n/**\r\n * üîπ Agrega un producto al carrito del usuario actual.\r\n * Verifica sesi√≥n, stock y cantidad disponible.\r\n */\r\nexport async function addToCart(productId, quantity = 1) {\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n\r\n  if (userError) {\r\n    console.error(\"Error al obtener usuario:\", userError.message);\r\n    return;\r\n  }\r\n\r\n  if (!user) {\r\n    alert(\"‚ö†Ô∏è Debes iniciar sesi√≥n para agregar productos al carrito.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const cart = await getOrCreateCart(user.id);\r\n\r\n    // Verificar si el producto ya est√° en el carrito\r\n    const { data: existingItem } = await supabase\r\n      .from(\"cart_items\")\r\n      .select(\"*\")\r\n      .eq(\"cart_id\", cart.id)\r\n      .eq(\"product_id\", productId)\r\n      .single();\r\n\r\n    // Consultar stock del producto\r\n    const { data: product, error: productError } = await supabase\r\n      .from(\"products\")\r\n      .select(\"stock\")\r\n      .eq(\"id\", productId)\r\n      .single();\r\n\r\n    if (productError) throw productError;\r\n\r\n    if (!product) {\r\n      alert(\"‚ö†Ô∏è Producto no encontrado.\");\r\n      return;\r\n    }\r\n\r\n    if (product.stock <= 0) {\r\n      alert(\"‚ùå No hay stock disponible de este producto.\");\r\n      return;\r\n    }\r\n\r\n    // Si ya estaba en el carrito, actualizamos cantidad\r\n    if (existingItem) {\r\n      const newQuantity = Math.min(existingItem.quantity + quantity, product.stock);\r\n\r\n      await supabase\r\n        .from(\"cart_items\")\r\n        .update({ quantity: newQuantity })\r\n        .eq(\"id\", existingItem.id);\r\n    } else {\r\n      // Si no estaba, lo insertamos\r\n      await supabase\r\n        .from(\"cart_items\")\r\n        .insert({ cart_id: cart.id, product_id: productId, quantity });\r\n    }\r\n\r\n    alert(\"‚úÖ Producto agregado al carrito.\");\r\n  } catch (err) {\r\n    console.error(\"Error al agregar al carrito:\", err.message);\r\n    alert(\"Ocurri√≥ un error al agregar el producto al carrito.\");\r\n  }\r\n}\r\n\r\n/**\r\n * üîπ Obtiene todos los productos del carrito del usuario actual.\r\n */\r\nexport async function getCartItems() {\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) return [];\r\n\r\n  try {\r\n    const cart = await getOrCreateCart(user.id);\r\n\r\n    const { data, error } = await supabase\r\n      .from(\"cart_items\")\r\n      .select(`\r\n        id,\r\n        quantity,\r\n        products (\r\n          id,\r\n          name,\r\n          price,\r\n          stock,\r\n          image_url\r\n        )\r\n      `)\r\n      .eq(\"cart_id\", cart.id);\r\n\r\n    if (error) throw error;\r\n\r\n    return data || [];\r\n  } catch (err) {\r\n    console.error(\"Error al obtener items del carrito:\", err.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * üîπ Elimina un producto espec√≠fico del carrito.\r\n */\r\nexport async function removeFromCart(itemId) {\r\n  const { error } = await supabase.from(\"cart_items\").delete().eq(\"id\", itemId);\r\n  if (error) console.error(\"Error al eliminar del carrito:\", error.message);\r\n}\r\n\r\n/**\r\n * üîπ Vac√≠a completamente el carrito del usuario actual.\r\n */\r\nexport async function clearCart() {\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) return;\r\n\r\n  const cart = await getOrCreateCart(user.id);\r\n  const { error } = await supabase.from(\"cart_items\").delete().eq(\"cart_id\", cart.id);\r\n\r\n  if (error) console.error(\"Error al limpiar carrito:\", error.message);\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,UAAU;;AAEnC;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACC,MAAM,EAAE;EAC5C,IAAI,CAACA,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;EAEvD;EACA,MAAM;IAAEC,IAAI,EAAEC,YAAY;IAAEC,KAAK,EAAEC;EAAW,CAAC,GAAG,MAAMP,QAAQ,CAC7DQ,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAER,MAAM,CAAC,CACrBS,MAAM,CAAC,CAAC;;EAEX;EACA,IAAIJ,UAAU,IAAIA,UAAU,CAACK,IAAI,KAAK,UAAU,EAAE;IAChDC,OAAO,CAACP,KAAK,CAAC,2BAA2B,EAAEC,UAAU,CAACO,OAAO,CAAC;IAC9D,MAAMP,UAAU;EAClB;;EAEA;EACA,IAAIF,YAAY,EAAE,OAAOA,YAAY;;EAErC;EACA,MAAM;IAAED,IAAI,EAAEW,OAAO;IAAET,KAAK,EAAEU;EAAY,CAAC,GAAG,MAAMhB,QAAQ,CACzDQ,IAAI,CAAC,OAAO,CAAC,CACbS,MAAM,CAAC;IAAEC,OAAO,EAAEhB;EAAO,CAAC,CAAC,CAC3BO,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC;EAEX,IAAIK,WAAW,EAAE;IACfH,OAAO,CAACP,KAAK,CAAC,yBAAyB,EAAEU,WAAW,CAACF,OAAO,CAAC;IAC7D,MAAME,WAAW;EACnB;EAEA,OAAOD,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeI,SAASA,CAACC,SAAS,EAAEC,QAAQ,GAAG,CAAC,EAAE;EACvD,MAAM;IAAEjB,IAAI,EAAE;MAAEkB;IAAK,CAAC;IAAEhB,KAAK,EAAEiB;EAAU,CAAC,GAAG,MAAMvB,QAAQ,CAACwB,IAAI,CAACC,OAAO,CAAC,CAAC;EAE1E,IAAIF,SAAS,EAAE;IACbV,OAAO,CAACP,KAAK,CAAC,2BAA2B,EAAEiB,SAAS,CAACT,OAAO,CAAC;IAC7D;EACF;EAEA,IAAI,CAACQ,IAAI,EAAE;IACTI,KAAK,CAAC,4DAA4D,CAAC;IACnE;EACF;EAEA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAM1B,eAAe,CAACqB,IAAI,CAACM,EAAE,CAAC;;IAE3C;IACA,MAAM;MAAExB,IAAI,EAAEyB;IAAa,CAAC,GAAG,MAAM7B,QAAQ,CAC1CQ,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEiB,IAAI,CAACC,EAAE,CAAC,CACtBlB,EAAE,CAAC,YAAY,EAAEU,SAAS,CAAC,CAC3BT,MAAM,CAAC,CAAC;;IAEX;IACA,MAAM;MAAEP,IAAI,EAAE0B,OAAO;MAAExB,KAAK,EAAEyB;IAAa,CAAC,GAAG,MAAM/B,QAAQ,CAC1DQ,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,OAAO,CAAC,CACfC,EAAE,CAAC,IAAI,EAAEU,SAAS,CAAC,CACnBT,MAAM,CAAC,CAAC;IAEX,IAAIoB,YAAY,EAAE,MAAMA,YAAY;IAEpC,IAAI,CAACD,OAAO,EAAE;MACZJ,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IAEA,IAAII,OAAO,CAACE,KAAK,IAAI,CAAC,EAAE;MACtBN,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;;IAEA;IACA,IAAIG,YAAY,EAAE;MAChB,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACN,YAAY,CAACR,QAAQ,GAAGA,QAAQ,EAAES,OAAO,CAACE,KAAK,CAAC;MAE7E,MAAMhC,QAAQ,CACXQ,IAAI,CAAC,YAAY,CAAC,CAClB4B,MAAM,CAAC;QAAEf,QAAQ,EAAEY;MAAY,CAAC,CAAC,CACjCvB,EAAE,CAAC,IAAI,EAAEmB,YAAY,CAACD,EAAE,CAAC;IAC9B,CAAC,MAAM;MACL;MACA,MAAM5B,QAAQ,CACXQ,IAAI,CAAC,YAAY,CAAC,CAClBS,MAAM,CAAC;QAAEoB,OAAO,EAAEV,IAAI,CAACC,EAAE;QAAEU,UAAU,EAAElB,SAAS;QAAEC;MAAS,CAAC,CAAC;IAClE;IAEAK,KAAK,CAAC,iCAAiC,CAAC;EAC1C,CAAC,CAAC,OAAOa,GAAG,EAAE;IACZ1B,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEiC,GAAG,CAACzB,OAAO,CAAC;IAC1DY,KAAK,CAAC,qDAAqD,CAAC;EAC9D;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAec,YAAYA,CAAA,EAAG;EACnC,MAAM;IAAEpC,IAAI,EAAE;MAAEkB;IAAK;EAAE,CAAC,GAAG,MAAMtB,QAAQ,CAACwB,IAAI,CAACC,OAAO,CAAC,CAAC;EACxD,IAAI,CAACH,IAAI,EAAE,OAAO,EAAE;EAEpB,IAAI;IACF,MAAMK,IAAI,GAAG,MAAM1B,eAAe,CAACqB,IAAI,CAACM,EAAE,CAAC;IAE3C,MAAM;MAAExB,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCQ,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,SAAS,EAAEiB,IAAI,CAACC,EAAE,CAAC;IAEzB,IAAItB,KAAK,EAAE,MAAMA,KAAK;IAEtB,OAAOF,IAAI,IAAI,EAAE;EACnB,CAAC,CAAC,OAAOmC,GAAG,EAAE;IACZ1B,OAAO,CAACP,KAAK,CAAC,qCAAqC,EAAEiC,GAAG,CAACzB,OAAO,CAAC;IACjE,OAAO,EAAE;EACX;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAe2B,cAAcA,CAACC,MAAM,EAAE;EAC3C,MAAM;IAAEpC;EAAM,CAAC,GAAG,MAAMN,QAAQ,CAACQ,IAAI,CAAC,YAAY,CAAC,CAACmC,MAAM,CAAC,CAAC,CAACjC,EAAE,CAAC,IAAI,EAAEgC,MAAM,CAAC;EAC7E,IAAIpC,KAAK,EAAEO,OAAO,CAACP,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACQ,OAAO,CAAC;AAC3E;;AAEA;AACA;AACA;AACA,OAAO,eAAe8B,SAASA,CAAA,EAAG;EAChC,MAAM;IAAExC,IAAI,EAAE;MAAEkB;IAAK;EAAE,CAAC,GAAG,MAAMtB,QAAQ,CAACwB,IAAI,CAACC,OAAO,CAAC,CAAC;EACxD,IAAI,CAACH,IAAI,EAAE;EAEX,MAAMK,IAAI,GAAG,MAAM1B,eAAe,CAACqB,IAAI,CAACM,EAAE,CAAC;EAC3C,MAAM;IAAEtB;EAAM,CAAC,GAAG,MAAMN,QAAQ,CAACQ,IAAI,CAAC,YAAY,CAAC,CAACmC,MAAM,CAAC,CAAC,CAACjC,EAAE,CAAC,SAAS,EAAEiB,IAAI,CAACC,EAAE,CAAC;EAEnF,IAAItB,KAAK,EAAEO,OAAO,CAACP,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACQ,OAAO,CAAC;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}